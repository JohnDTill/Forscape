//Yet another implementation of a parallel continuum robot
//https://github.com/JohnDTill/ContinuumRobotExamples

//Independent params
p⁜_⏴d⏵ = ⁜[1x3]⏴0⏵⏴0⏵⏴0.4⏵⁜^⏴⊤⏵ //Desired end-effector position (m)
R⁜_⏴d⏵ = I⁜_⏴3×3⏵ //Desired end-effector rotation
N = 40 //Number of gridpoints
v⁜^⏴*⏵(s) = e⁜^_⏴3×1⏵⏴2⏵ //Initial shear
u⁜^⏴*⏵(s) = 0⁜_⏴3×1⏵ //Initial curvature
r = 0.001 //Rod radius (m)
r⁜_⏴e⏵ = 0.087 //Attachment pattern radius (m)
α⁜_⏴1⏵ = 100 × (π/180) //Pattern major angle (rad)
ρ = 8000 //Material density, kg/m^3
E = 207 × 10⁜^⏴9⏵ //Young's modulus (Pa)
ν = 0.3 //Poisson's ratio
F⁜_⏴e⏵ = 0⁜_⏴3×1⏵ //External force on end-effector (N)
M⁜_⏴e⏵ = 0⁜_⏴3×1⏵ //External moment on end-effector (Nm)
//Dependent params
G = ⁜f⏴E⏵⏴2(1 + ν)⏵ //Shear modulus (Pa)
A = πr⁜^⏴2⏵ //Cross-sectional area (m^2)
I = ⁜f⏴πr⁜^⏴4⏵⏵⏴4⏵ //Bending moment of inertia (m^4)
J = 2I //Polar moment of inertia (m^4)
K⁜_⏴se⏵ = ⁜[3x3]⏴GA⏵⏴0⏵⏴0⏵⏴0⏵⏴GA⏵⏴0⏵⏴0⏵⏴0⏵⏴EA⏵ //Shear/extension stiffness (N)
K⁜_⏴bt⏵ = ⁜[3x3]⏴EI⏵⏴0⏵⏴0⏵⏴0⏵⏴EI⏵⏴0⏵⏴0⏵⏴0⏵⏴GJ⏵ //Bending/torsion stiffness (Nm^2)
f = -ρ A ⁜[1x3]⏴0⏵⏴0⏵⏴-9.81⏵⁜^⏴⊤⏵ //Distributed force (N/m)
l = 0⁜_⏴3×1⏵ //Distributed moment (Nm)
α⁜_⏴2⏵ = 120 × (π/180) - α⁜_⏴1⏵ //Pattern minor angle (rad)

alg quat2rot(h){
    R = I⁜_⏴3×3⏵ + ⁜f⏴2⏵⏴h⁜^⏴⊤⏵h⏵⁜[3x3]⏴-h⁜^_⏴2⏵⏴2⏵-h⁜^_⏴2⏵⏴3⏵⏵⏴h⁜_⏴1⏵h⁜_⏴2⏵-h⁜_⏴0⏵h⁜_⏴3⏵⏵⏴h⁜_⏴1⏵h⁜_⏴3⏵+h⁜_⏴0⏵h⁜_⏴2⏵⏵⏴h⁜_⏴1⏵h⁜_⏴2⏵+h⁜_⏴0⏵h⁜_⏴3⏵⏵⏴-h⁜^_⏴2⏵⏴1⏵-h⁜^_⏴2⏵⏴3⏵⏵⏴h⁜_⏴2⏵h⁜_⏴3⏵-h⁜_⏴0⏵h⁜_⏴1⏵⏵⏴h⁜_⏴1⏵h⁜_⏴3⏵-h⁜_⏴0⏵h⁜_⏴2⏵⏵⏴h⁜_⏴2⏵h⁜_⏴3⏵+h⁜_⏴0⏵h⁜_⏴1⏵⏵⏴-h⁜^_⏴2⏵⏴1⏵-h⁜^_⏴2⏵⏴2⏵⏵
    return R
}

alg cosseratEqns(s, x){
    h = x⁜_⏴3:6⏵ //Quaternion
    R = quat2rot(h) //Rotation
    n = x⁜_⏴7:9⏵ //Internal force (N)
    m = x⁜_⏴10:12⏵ //Internal moment (Nm)
    
    v = v⁜^⏴*⏵(s) + K⁜_⏴se⏵⁜^⏴-1⏵R⁜^⏴⊤⏵n //Shear
    u = u⁜^⏴*⏵(s) + K⁜_⏴bt⏵⁜^⏴-1⏵R⁜^⏴⊤⏵m //Curvature (1/m)
    
    p⁜_⏴d⏵ = Rv
    h⁜_⏴d⏵ = ⁜f⏴1⏵⏴2⏵ ⁜[4x4]⏴0⏵⏴-u⁜_⏴0⏵⏵⏴-u⁜_⏴1⏵⏵⏴-u⁜_⏴2⏵⏵⏴u⁜_⏴0⏵⏵⏴0⏵⏴u⁜_⏴2⏵⏵⏴-u⁜_⏴1⏵⏵⏴u⁜_⏴1⏵⏵⏴-u⁜_⏴2⏵⏵⏴0⏵⏴u⁜_⏴0⏵⏵⏴u⁜_⏴2⏵⏵⏴u⁜_⏴1⏵⏵⏴-u⁜_⏴0⏵⏵⏴0⏵h
    n⁜_⏴d⏵ = -f
    m⁜_⏴d⏵ = -p⁜_⏴d⏵×n - l
    
    return ⁜[1x4]⏴p⁜_⏴d⏵⁜^⏴⊤⏵⏵⏴h⁜_⏴d⏵⁜^⏴⊤⏵⏵⏴n⁜_⏴d⏵⁜^⏴⊤⏵⏵⏴m⁜_⏴d⏵⁜^⏴⊤⏵⏵⁜^⏴⊤⏵
}
    
alg rk4(f, y⁜_⏴0⏵, t⁜_⏴0⏵, t⁜_⏴f⏵, N){
    h = ⁜f⏴t⁜_⏴f⏵ - t⁜_⏴0⏵⏵⏴N - 1⏵ //Step size
    Y ← 0⁜_⏴len(y⁜_⏴0⏵)×N⏵ //ODE approximate solution
    Y⁜_⏴:,0⏵ ← y⁜_⏴0⏵
    for(i ← 0; i < N-1; i ← i + 1){
        t⁜_⏴n⏵ = t⁜_⏴0⏵ + i*h
        y⁜_⏴n⏵ = Y⁜_⏴:,i⏵
        k⁜_⏴1⏵ = f(t⁜_⏴n⏵, y⁜_⏴n⏵) 
        k⁜_⏴2⏵ = f(t⁜_⏴n⏵ + ⁜f⏴h⏵⏴2⏵ , y⁜_⏴n⏵ + h⁜f⏴k⁜_⏴1⏵⏵⏴2⏵)
        k⁜_⏴3⏵ = f(t⁜_⏴n⏵ + ⁜f⏴h⏵⏴2⏵ , y⁜_⏴n⏵ + h⁜f⏴k⁜_⏴2⏵⏵⏴2⏵)
        k⁜_⏴4⏵ = f(t⁜_⏴n⏵ + h , y⁜_⏴n⏵ + h k⁜_⏴3⏵)
        Y⁜_⏴:,i+1⏵ ← y⁜_⏴n⏵ + ⁜f⏴1⏵⏴6⏵ h (k⁜_⏴1⏵ + 2k⁜_⏴2⏵ + 2k⁜_⏴3⏵ + k⁜_⏴4⏵)
    }
    
    return Y
}

alg findRoot(f, x, tol=10⁜^⏴-15⏵, max_iter = 100, λ=10⁜^⏴-6⏵){
    for(iter ← 0; iter ≤ max_iter; iter ← iter + 1){
        r = f(x)
        if(‖r‖⁜^⏴2⏵ < tol) return x
        J = ⁜f⏴∂f(x)⏵⏴∂x⏵ //Objective function Jacobian
        x ← x - (J⁜^⏴⊤⏵J + λI⁜_⏴len(x)×len(x)⏵)⁜^⏴-1⏵ J⁜^⏴⊤⏵r //Levenberg-Marquardt step
    }
    assert(false) //Fail to meet tolerance in allowed iterations
}

py ← 0⁜_⏴1×12N⏵
pz ← 0⁜_⏴1×12N⏵

alg objFun(x){
    Ef ← F⁜_⏴e⏵ //Running force error
    Em ← M⁜_⏴e⏵ //Running moment error
    res ← 0⁜_⏴36×1⏵ //Residual vector
    
    for(i ← 0; i < 6; i ← i + 1){
        θ⁜_⏴B⏵ = -α⁜_⏴2⏵/2 + ⁜f⏴(i + 1) - (i + 1)%2⏵⏴2⏵α⁜_⏴2⏵ + ⁜f⏴i - i%2⏵⏴2⏵α⁜_⏴1⏵
        θ⁜_⏴E⏵ = -α⁜_⏴1⏵/2 + ⁜f⏴(i + 1) - (i + 1)%2⏵⏴2⏵α⁜_⏴1⏵ + ⁜f⏴i - i%2⏵⏴2⏵α⁜_⏴2⏵
        p⁜_⏴0⏵ = r⁜_⏴e⏵ ⁜[1x3]⏴cosθ⁜_⏴B⏵⏵⏴sinθ⁜_⏴B⏵⏵⏴0⏵⁜^⏴⊤⏵ //Rod proximal position
        r⁜_⏴F⏵ = r⁜_⏴e⏵ ⁜[1x3]⏴cosθ⁜_⏴E⏵⏵⏴sinθ⁜_⏴E⏵⏵⏴0⏵⁜^⏴⊤⏵ //Vector from end-effector center to distal rod in EE frame
        h⁜_⏴0⏵ = e⁜^_⏴4×1⏵⏴0⏵
        n⁜_⏴0⏵ = x⁜_⏴5i:5i+2⏵ //Internal force at base (N)
        m⁜_⏴0⏵ = ⁜[1x3]⏴x⁜_⏴5i+3⏵⏵⏴x⁜_⏴5i+4⏵⏵⏴0⏵⁜^⏴⊤⏵ //Moment at base (Nm)
        L = x⁜_⏴30+i⏵ //Length of rod (m)
        y⁜_⏴0⏵ = ⁜[1x4]⏴p⁜_⏴0⏵⁜^⏴⊤⏵⏵⏴h⁜_⏴0⏵⁜^⏴⊤⏵⏵⏴n⁜_⏴0⏵⁜^⏴⊤⏵⏵⏴m⁜_⏴0⏵⁜^⏴⊤⏵⏵⁜^⏴⊤⏵
        
        Y = rk4(cosseratEqns, y⁜_⏴0⏵, 0, L, N)
        y⁜_⏴f⏵ = Y⁜_⏴:,N-1⏵
        py⁜_⏴2N*i : 2N*(i+1)-1⏵ ← ⁜[1x2]⏴Y⁜_⏴1,::-1⏵⏵⏴Y⁜_⏴1,:⏵⏵
        pz⁜_⏴2N*i : 2N*(i+1)-1⏵ ← ⁜[1x2]⏴Y⁜_⏴2,::-1⏵⏵⏴Y⁜_⏴2,:⏵⏵

        p⁜_⏴f⏵ = y⁜_⏴f⏵⁜_⏴0:2⏵
        h⁜_⏴f⏵ = y⁜_⏴f⏵⁜_⏴3:6⏵
        R⁜_⏴f⏵ = quat2rot(h⁜_⏴f⏵)
        n⁜_⏴f⏵ = y⁜_⏴f⏵⁜_⏴7:9⏵
        m⁜_⏴f⏵ = y⁜_⏴f⏵⁜_⏴10:12⏵
        
        E⁜_⏴p⏵ = p⁜_⏴d⏵ + R⁜_⏴d⏵r⁜_⏴F⏵ - p⁜_⏴f⏵ //Rod position error
        E⁜_⏴R⏵ = (R⁜_⏴d⏵⁜^⏴⊤⏵R⁜_⏴f⏵ - R⁜_⏴d⏵R⁜_⏴f⏵⁜^⏴⊤⏵)⁜^⏴∨⏵⁜_⏴0:1⏵ //Rod orientation error
        res⁜_⏴5i : 5i+2⏵ ← E⁜_⏴p⏵
        res⁜_⏴5i +3: 5i+4⏵ ← E⁜_⏴R⏵
        Ef ← Ef - n⁜_⏴f⏵
        Em ← Em - (m⁜_⏴f⏵ + (R⁜_⏴d⏵r⁜_⏴F⏵) × n⁜_⏴f⏵)
    }
    
    res⁜_⏴30:32⏵ ← Ef
    res⁜_⏴33:35⏵ ← Em
    
    return res
}

guess = ⁜[1x2]⏴0⁜_⏴1×30⏵⏵⏴0.4*1⁜_⏴1×6⏵⏵⁜^⏴⊤⏵
sol = findRoot(objFun, guess)
L = sol⁜_⏴30:35⏵
print("L = ", L⁜^⏴⊤⏵)
plot("Continuum Stewart-Gough Solution", "x (m)", py, "z(m)", pz)